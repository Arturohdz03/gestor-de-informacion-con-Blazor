@page "/Empleados"
@using Microsoft.AspNetCore.Authorization
@using Newtonsoft.Json
@using PaginaWebCEAA.Shared.DTO
@using PaginaWebCEAA.Shared.Services
@using ClosedXML.Excel
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime _JsServicio
@inherits LayoutComponentBase

@attribute [Authorize]

<h1>Empleados</h1>

<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo01" aria-controls="navbarTogglerDemo01" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>

    <div class="collapse navbar-collapse" id="navbarTogglerDemo01">
        <form class="form-inline my-2 my-lg-0">
            <input type="text" class="form-control mr-sm-2" @bind="IdPersF" placeholder="Numero de empleado">
        </form>
        <button class="btn btn-outline-success my-2 my-sm-0" @onclick="Filtrar" type="submit">Buscar</button>
    </div>

    <div class="ml-auto">
        <button type="button" @onclick="(async () => await Redirect())" class="btn btn-danger">+</button>
        <button type="button" @onclick="ExportarExcel" class="btn btn-dark">Exportar</button>
    </div>
</nav>
<br />
<style>
    .no-rounded-corners {
        border-radius: 10px;
        overflow: hidden; /* Esto asegura que los bordes redondeados se apliquen correctamente */
    }

    .table-header th {
        background-color: #BC955B;
        color: white; /* Color de texto blanco */
    }

    .table-striped tbody tr:nth-of-type(odd) {
        background-color: rgba(188, 149, 91, 0.1); /* Color de fondo alternado */
    }

    .table-striped tbody tr:hover {
        background-color: rgba(188, 149, 91, 0.3); /* Color de fondo al pasar el ratón */
    }

    /* Estilo personalizado para los botones */
    .btn {
        border-radius: 10px; /* Bordes redondeados */
        padding: 8px 16px; /* Espaciado interno */
        font-size: 16px; /* Tamaño de fuente */
        transition: background-color 0.3s ease; /* Transición suave */
    }

    .btn-danger {
        background-color: #FF5851; /* Color de fondo para el botón de eliminar */
        color: white; /* Texto blanco */
        border: none; /* Sin borde */
    }

    .btn-dark {
        background-color: #4B4B4B; /* Color de fondo para el botón de exportar */
        color: white; /* Texto blanco */
        border: none; /* Sin borde */
    }

    .btn-primary {
        background-color: #007BFF; /* Color de fondo para el botón de editar */
        color: white; /* Texto blanco */
        border: none; /* Sin borde */
    }

        /* Estilo para los botones de eliminar y editar */
        .btn-primary:hover, .btn-danger:hover, .btn-dark:hover {
            filter: brightness(90%); /* Reducción del brillo al pasar el ratón */
        }
</style>

<table class="table table-striped no-rounded-corners">
    <thead class="table-header">
        <tr>
            <th>ID</th>
            <th>NOMBRE</th>
            <th>AREA</th>
            <th>CELULAR</th>
            <th>CORREO</th>
            <th>PUESTO</th>
            <th>NIVEL</th>
            <th>OPCIONES</th>
            <th></th>
        </tr>
    </thead>

    <tbody>
        @foreach (var emp in listEmpleados)
        {
            <tr>
                <td>@emp.id_emp</td>
                <td>@emp.emp_nombre</td>
                <td>@emp.Area.are_nombre</td>
                <td>@emp.emp_celular</td>
                <td>@emp.emp_correo</td>
                <td>@emp.Puesto.pue_nombre</td>
                <td>@emp.Puesto.pue_nivel</td>

                <td>
                    <button type="button" @onclick="(async () => await DeleteEmployed(emp.id_emp))" class="btn btn-danger">Eliminar</button>
                </td>
                <td>
                    <button type="button" @onclick="(async () => await NavigateToUpdateEmployed(emp.id_emp))" class="btn btn-primary">Editar</button>
                </td>
            </tr>
        }
    </tbody>
</table>


@* <h1>Empleados</h1>
<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo01" aria-controls="navbarTogglerDemo01" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarTogglerDemo01">
        <form class="form-inline my-2 my-lg-0">
            <input type="text" class="form-control mr-sm-2" @bind="IdPersF" placeholder="Numero de empleado">
        </form>
        <button class="btn btn-outline-success my-2 my-sm-0" @onclick="Filtrar" type="submit">Buscar</button>
    </div>
  <div>
        <button type="button" @onclick="(async () => await Redirect())" class="btn btn-outline-danger">+</button>
        <button type="button" @onclick="ExportarExcel" class="btn btn-outline-dark">Exportar</button>
    </div> 
</nav>
<br />
<style>
    .no-rounded-corners {
        border-radius: 10px;
        overflow: hidden; /* Esto asegura que los bordes redondeados se apliquen correctamente */
    }
    .table-header th {
        background-color: #BC955B; 
    }
</style>
<table class="table table-striped no-rounded-corners">
    <thead class="table-header">
        <tr>
            <th>ID</th>
            <th>NOMBRE</th>
            <th>AREA</th>
            <th>CELULAR</th>
            <th>CORREO</th>
            <th>PUESTO</th>
            <th>NIVEL</th>
            <th>    OPCIONES</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var emp in listEmpleados)
        {
            <tr>
                <td>@emp.id_emp</td>
                <td>@emp.emp_nombre</td>
                <td>@emp.Area.are_nombre</td>
                <td>@emp.emp_celular</td>
                <td>@emp.emp_correo</td>
                <td>@emp.Puesto.pue_nombre</td>
                <td>@emp.Puesto.pue_nivel</td>
                <td><button type="button" @onclick="(async () => await DeleteEmployed(emp.id_emp))" class="btn btn-danger">Delete</button></td>
                <td><button type="button" @onclick="(async () => await NavigateToUpdateEmployed(emp.id_emp))" class="btn btn-primary">Edit</button></td>
            </tr>
        }
    </tbody>
</table> *@

@code {
    protected List<EmpleadoDTO> listEmpleados = new();
    private string IdPersF { get; set; }
    private string mensajeError;

    protected override async Task OnInitializedAsync()
    {
        await GetEmpleadoList();
    } 


    protected async Task GetEmpleadoList()
    {
        string apiUrl = "https://localhost:44317/api/empleados/get-empleados-lista";
        var response = await Http.GetAsync(apiUrl);
        response.EnsureSuccessStatusCode();
        string responseBodyJson = await response.Content.ReadAsStringAsync();

        listEmpleados = JsonConvert.DeserializeObject<List<EmpleadoDTO>>(responseBodyJson);
    }
    protected async Task Filtrar()
    {
        if (!string.IsNullOrEmpty(IdPersF) && int.TryParse(IdPersF, out int id_emp))
        {
            try
            {
                mensajeError = null;
                var response = await Http.GetAsync($"https://localhost:44317/api/empleados/get-empleado/{id_emp}");
                if (response.IsSuccessStatusCode)
                {
                    var empleado = await response.Content.ReadFromJsonAsync<EmpleadoDTO>();
                    listEmpleados = new List<EmpleadoDTO> { empleado };
                }
                else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
                {
                    listEmpleados.Clear();
                    mensajeError = "No se encontró el empleado con el ID proporcionado.";
                }
                else
                {
                    listEmpleados.Clear();
                    mensajeError = "Ocurrió un error al buscar el empleado.";
                }
            }
            catch (Exception ex)
            {
                // Maneja el error según sea necesario
                listEmpleados.Clear();
                mensajeError = $"Ocurrió un error interno del servidor: {ex.Message}";
            }
        }
        else
        {
            listEmpleados.Clear();
            mensajeError = "Por favor, ingrese un ID de empleado válido.";
        }
    }
    protected async Task DeleteEmployed(int id_emp)
    {
        string apiUrl = "https://localhost:44317/api/empleados/delete-empleado/" + id_emp;

        await Http.DeleteAsync(apiUrl);

        NavigationManager.NavigateTo("/Empleados");
    }
    
    //Actualizar
    protected async Task NavigateToUpdateEmployed(int id_emp)
    {
        string pageURl = "update-empleado/" + id_emp;

        NavigationManager.NavigateTo(pageURl);
    }


    protected async Task Redirect()
    {
        string pageURl = "/crear-empleado";

        NavigationManager.NavigateTo(pageURl);
    }

    protected async Task ExportarExcel()
    {
        using (var libro = new XLWorkbook())
        {
            IXLWorksheet hoja = libro.Worksheets.Add("Empleados");

            hoja.Cell(1,1).Value = "ID EMPLEADO";
            hoja.Cell(1,2).Value = "NOMBRE EMPLEADO";
            hoja.Cell(1,3).Value = "AREA";
            hoja.Cell(1,4).Value = "CELULAR";
            hoja.Cell(1,5).Value = "CORREO";
            hoja.Cell(1,6).Value = "PUESTO";
            hoja.Cell(1,7).Value = "NIVEL";
     

            for (int fila = 1; fila <= listEmpleados.Count; fila++)
            {
                hoja.Cell(fila + 1, 1).Value = listEmpleados[fila - 1].id_emp;
                hoja.Cell(fila + 1, 2).Value = listEmpleados[fila - 1].emp_nombre;
                hoja.Cell(fila + 1, 3).Value = listEmpleados[fila - 1].Area.are_nombre;
                hoja.Cell(fila + 1, 4).Value = listEmpleados[fila - 1].emp_celular;
                hoja.Cell(fila + 1, 5).Value = listEmpleados[fila - 1].emp_correo;
                hoja.Cell(fila + 1, 6).Value = listEmpleados[fila - 1].Puesto.pue_nombre;
                hoja.Cell(fila + 1, 7).Value = listEmpleados[fila - 1].Puesto.pue_nivel;
            }
            using (var memoria = new MemoryStream())
            {
                libro.SaveAs(memoria);
                var nombreExcel = string.Concat("ReporteEmpleados ", DateTime.Now.ToString(), ".xlsx");

                await _JsServicio.InvokeAsync<object>(
                    "DescargarExcel",
                    nombreExcel,
                    Convert.ToBase64String(memoria.ToArray())
                );
            }
        }
    }

}

